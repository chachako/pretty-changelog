# configuration file for git-cliff (0.1.0)

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
# body = """
# {% if version %}\
#     ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
# {% else %}\
#     ## [unreleased]
# {% endif %}\
# {% for group, commits in commits | group_by(attribute="group") %}
#     ### {{ group | upper_first }}
#     {% for commit in commits %}
#         - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}\
#     {% endfor %}
# {% endfor %}\n
# """
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- Generated by https://github.com/chachako/pretty-changelog -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Remove trailing pr number
    #   before: 'type: do something (#54)'
    #   after: 'type: do something'
    { pattern = '^(.*)\s\(#\d+\)$', replace = '${1}' },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "1. 🎈 Features" },
    { message = "^fix", group = "2. 🧊 Bug Fixes" },
    { message = "^perf", group = "3. 🎯 Performance" },
    { message = "^refactor", group = "4. 🌱 Refactor" },
    { message = "^chore\\(deps\\)", group = "5. 📚 Dependencies", scope = "Dependencies" },
    { message = "^chore", group = "9. 🍼 Miscellaneous" },
    { message = ".*deprecated", group = "6. 🦴 Deprecations" },
    { body = ".*deprecated", group = "6. 🦴 Deprecations" },
    { body = ".*security", group = "7. 🛡 Security" },

    { message = "^ci", skip = true },
    { message = "^doc", skip = true },
    { message = "^test", skip = true },
    { message = "^style", skip = true },
    { message = "^build", skip = true },
    { message = "^revert", skip = true },
    { message = "^release", skip = true },
    { message = "^\\w+\\(ci\\):", skip = true },
    { message = "^\\w+\\(doc\\):", skip = true },
    { message = "^\\w+\\(test\\):", skip = true },
    { message = "^\\w+\\(build\\):", skip = true },
    { message = "^chore\\(release\\): prepare for", skip = true },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags chronologically
date_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
# limit the number of commits included in the changelog
# limit_commits = 42

[github]
# try to resolve the Github informations associated with the authors of the commits
resolve_authors = true
# try to resolve the Github pull request links associated with the commits
resolve_prs = true
# github repository name with owner (for example, torvalds/linux), resolved by default via git remote url
# repository = ""